# 9. 빈 생명주기와 콜백 (Sigleton Scope)
스프링 빈에게도 생명주기에 따른 콜백 함수가 있다. 
<!-- DB 서버 미리 열어두기, 소켓 미리 열어두기 -->
<br>

스프링 빈에는 아래와 같은 이벤트 라이프사이클이 존재한다.
1. 스프링 컨테이너 생성
2. **스프링 빈 생성 (생성자 injection 발생 위치)**
3. **의존관계 주입** (setter, field injcetion 발생 위치)
4. <U>초기화 **콜백** </U>
5. 빈 사용, 애플리케이션 동작
6. <U>빈 소멸 전 **콜백** </U>
7. 스프링 종료

스프링 빈은 의존관계 주입 단계 이후 부터 필요한 데이터들을 사용할 수 있는 준비가 완료된다고 한다. 
따라서, 초기화 작업은 의존관계 주입 이후에 이루어져야 한다. <br>
이런 필요성 때문에 **초기화 시점과, 빈 소멸 직전 시점에 콜백 함수가 지원된다.**

- **초기화 콜백:** 빈이 생성되고, 빈의 의존관계 주입이 완료된 후 호출
- **소멸전 콜백:** 빈이 소멸되기 직전에 호출

## 9.1 생명주기 콜백을 지원하는 3가지 방법
스프링은 크게 3가지 방법으로 빈 생명주기 콜백을 지원한다.
1. 인터페이스: `InitializingBean`, `DisposableBean`
2. **설정정보:** 초기화 메서드, 종료 메서드를 설정 정보에 지정
3. **:star:애노테이션:star::** `@PostConstruct`, `@PreDestroy` 지원

초기화 콜백은 의존관계 주입 이후에 호출되는 함수로, 자알~만 하면 생성자 안에서 의존성을 부여하고, 바로 실행시켜 주는 등의 구현으로 직접 구현해줄 수 있어 보인다. 그러나 이것은 좋은 설계가 아니다! <br>

**생성자는 메모리를 할당 받아 객체를 생성하고, 필수 정보를 초기화 해주는 데에만 집중하는 것이 옳다!** <br>
이렇게 생성된 값들을 활용해서 외부와 커넥션을 만든다던지, 어떤 로직을 실행한다는 등의 무거운 로직들은 생성자에 있으면 안 된다. <br>
이것은 가장 중요한 원칙인 **단일 책임 원칙 SRP를** 어기는 일이기 때문이다! <br>
어찌 감히 김영한 수령님의 명을 어기고, 생성자에게 여러 책임을 부여하는가? 실로 불경한 일이 아니라고 볼 수 없다. <br>
**생성자는 생성만** 하고, 콜백 기능들은 위의 3가지 방식으로 제공한다!

## 9.2 interface `InitializingBean`, `DisposableBean`로 콜백 메서드 사용하기
두 가지 인터페이스를 통해 콜백 함수를 이용해보자. <br>

1. `InitializingBean`의 `afterPropertiesSet()`은 **의존관계 주입이 끝난 이후 호출된다.** <br>
2. `DisposableBean`의 `destroy()`은 **객체가 소멸될 때 호출된다.**
<br>

init bean님을 만나기 전 불경한 모습. 애초에 url값을 초기화해주지 않은 채로 생성자에서 connect() 함수를 호출하므로, 성공하지 못 한다.
```java
public class NetworkClient {
  
  private String url;

  public NetworkClient() {
      System.out.println("constructor url = " + url);
      connect();
      call("init network connection");
  }
}
```
생성자에서 쓸데없는 로직들을 실행해 주고 있다. 이제 connection method와 call method를 의존관계 주입 이후에 사용해보자.
```java
public class NetworkClient implements InitializingBean {
    
    private String url;
    
    public NetworkClient() {
        System.out.println("constructor url = " + url);
    }

    @Override
    public void afterPropertiesSet() throws Exception {
        connect();
        call("init network connection");
    }
}
```
아주 아름다운 모습. 생성자가 부담하던 로직들을 콜백 함수로 옮겨주었다. <br> 
`InitializingBean`의 method인  `afterPropertiesSet()`은 이름 그대로 **의존관계 주입이 끝난 이후 호출된다.** <br>
`DisposableBean`의 `destroy()` 또한 추가해주자.
```java
public class NetworkClient implements DisposableBean {
  
    @Override
    public void destroy() throws Exception {
        disconnect();
    }
}
```
interface를 통해 편하게 콜백함수를 이용할 수 있다.

### interface 방식의 단점
스프링의 interface를 이용하는 것이기 때문에, 코드가 스프링 전용 인터페이스에 의존한다. 따라서, 메서드들의 이름도, 코드도 수정할 수 없다. <br>
이러한 단점들과 다른 방식의 장점들 때문에, 요새는 잘 사용하지 않는다.

## 9.3 설정 정보로 콜백함수 사용하기
### by `@Bean(initMethod = "init", destroyMethod = "close")`
설정 정보를 통해 내가 만든 메서드가 콜백 메서드임을 지정해줍니다. <br>

```java
public class NetworkClient {

  private String url;
  
  public NetworkClient() {
      System.out.println("constructor url = " + url);
  }

  public void init() throws Exception {
      connect();
      call("init network connection");
  }

  public void close() throws Exception {
      disconnect();
  }
}
```
위 처럼 만든 `init()`과 `close()`를 콜백 메서드로 지정해준다.
```java
@Bean(initMethod = "init", destroyMethod = "close")
public NetworkClient networkClient() {
    NetworkClient networkClient = new NetworkClient();
    networkClient.setUrl("http://hello-spring.dev");
    return networkClient;
}
```
간편!

### 설정정보 콜백 지정 장점
1. 메서드 이름이 자유롭다
2. 스프링 빈이 스프링 코드에 의존하지 않는다.
3. 코드를 가져오는 것이 아니므로, 외부 라이브러리에도 초기화와 종료 메서드등을 적용해줄 수 있다!

### `@Bean`의 종료 메서드 추론?
`@Bean`의 `destroyMethod`에는 종료 메서드를 추론하는 기능이 탑재되어 있다. <br>
`@Bean`의 `destroyMethod`의 default 값은 `(inferred)`로 등록 되어 있는데, destroyMethod는 기본적으로 `close`, `shutdown`과 같은 이름들의 메서드를 자동으로 호출해준다. <br>
이는 분명 편리함을 제공한다. 기본값을 추측하기 때문에, 사용하지 않으려면, `destroyMethod = ""`을 입력해주면 된다.


<!-- 자바 Auto closeable -->
<!-- https://velog.io/@sa1341/AutoCloseable-%ED%81%B4%EB%9E%98%EC%8A%A4 -->

## 9.4 - 애노태이션으로 콜백함수 사용하기 :star:
그냥 이거 쓴다.
```java
@PostConstruct
public void init() throws Exception {
    connect();
    call("init network connection");
}

@PreDestroy
public void close() throws Exception {
    disconnect();
}
```
너무 간단하다;; javx에서 지원하는 두 개의 노테이션
- `@PostConstruct`: 이름 그대로 생성자 이후 호출되는 콜백
- `@PreDestroy`: 이름 그대로 빈 소멸 직전에 호출되는 콜백

스프링에 종속된 기술이 아니라 좋고, 컴포넌트 스캔과도 잘 어울린다. <br>
단, 외부 라이브러리에는 적용하지 못 한다. 외부 라이브러리를 초기화, 종료 해야한다면 `@Bean`의 `initMethod`, `destroyMethod`를 쓰면 된다!